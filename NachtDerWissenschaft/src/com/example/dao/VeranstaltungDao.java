package com.example.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table VERANSTALTUNG.
*/
public class VeranstaltungDao extends AbstractDao<Veranstaltung, Long> {

    public static final String TABLENAME = "VERANSTALTUNG";

    /**
     * Properties of entity Veranstaltung.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Titel = new Property(1, String.class, "titel", false, "TITEL");
        public final static Property Inhalt = new Property(2, String.class, "inhalt", false, "INHALT");
        public final static Property MapUrl = new Property(3, String.class, "mapUrl", false, "MAP_URL");
        public final static Property Zeit = new Property(4, String.class, "zeit", false, "ZEIT");
        public final static Property Ort = new Property(5, String.class, "ort", false, "ORT");
        public final static Property Kategorie = new Property(6, String.class, "kategorie", false, "KATEGORIE");
        public final static Property BisDreizehn = new Property(7, Boolean.class, "bisDreizehn", false, "BIS_DREIZEHN");
        public final static Property Barrierefrei = new Property(8, Boolean.class, "barrierefrei", false, "BARRIEREFREI");
        public final static Property Wissenschaftsjahr = new Property(9, Boolean.class, "wissenschaftsjahr", false, "WISSENSCHAFTSJAHR");
        public final static Property Jugendliche = new Property(10, Boolean.class, "jugendliche", false, "JUGENDLICHE");
        public final static Property Familie = new Property(11, Boolean.class, "familie", false, "FAMILIE");
        public final static Property Favorit = new Property(12, Boolean.class, "favorit", false, "FAVORIT");
        public final static Property Typ = new Property(13, String.class, "typ", false, "TYP");
        public final static Property InstitutId = new Property(14, long.class, "institutId", false, "INSTITUT_ID");
    };

    private Query<Veranstaltung> institut_VeranstaltungListQuery;

    public VeranstaltungDao(DaoConfig config) {
        super(config);
    }
    
    public VeranstaltungDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'VERANSTALTUNG' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TITEL' TEXT," + // 1: titel
                "'INHALT' TEXT," + // 2: inhalt
                "'MAP_URL' TEXT," + // 3: mapUrl
                "'ZEIT' TEXT," + // 4: zeit
                "'ORT' TEXT," + // 5: ort
                "'KATEGORIE' TEXT," + // 6: kategorie
                "'BIS_DREIZEHN' INTEGER," + // 7: bisDreizehn
                "'BARRIEREFREI' INTEGER," + // 8: barrierefrei
                "'WISSENSCHAFTSJAHR' INTEGER," + // 9: wissenschaftsjahr
                "'JUGENDLICHE' INTEGER," + // 10: jugendliche
                "'FAMILIE' INTEGER," + // 11: familie
                "'FAVORIT' INTEGER," + // 12: favorit
                "'TYP' TEXT," + // 13: typ
                "'INSTITUT_ID' INTEGER NOT NULL );"); // 14: institutId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'VERANSTALTUNG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Veranstaltung entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String titel = entity.getTitel();
        if (titel != null) {
            stmt.bindString(2, titel);
        }
 
        String inhalt = entity.getInhalt();
        if (inhalt != null) {
            stmt.bindString(3, inhalt);
        }
 
        String mapUrl = entity.getMapUrl();
        if (mapUrl != null) {
            stmt.bindString(4, mapUrl);
        }
 
        String zeit = entity.getZeit();
        if (zeit != null) {
            stmt.bindString(5, zeit);
        }
 
        String ort = entity.getOrt();
        if (ort != null) {
            stmt.bindString(6, ort);
        }
 
        String kategorie = entity.getKategorie();
        if (kategorie != null) {
            stmt.bindString(7, kategorie);
        }
 
        Boolean bisDreizehn = entity.getBisDreizehn();
        if (bisDreizehn != null) {
            stmt.bindLong(8, bisDreizehn ? 1l: 0l);
        }
 
        Boolean barrierefrei = entity.getBarrierefrei();
        if (barrierefrei != null) {
            stmt.bindLong(9, barrierefrei ? 1l: 0l);
        }
 
        Boolean wissenschaftsjahr = entity.getWissenschaftsjahr();
        if (wissenschaftsjahr != null) {
            stmt.bindLong(10, wissenschaftsjahr ? 1l: 0l);
        }
 
        Boolean jugendliche = entity.getJugendliche();
        if (jugendliche != null) {
            stmt.bindLong(11, jugendliche ? 1l: 0l);
        }
 
        Boolean familie = entity.getFamilie();
        if (familie != null) {
            stmt.bindLong(12, familie ? 1l: 0l);
        }
 
        Boolean favorit = entity.getFavorit();
        if (favorit != null) {
            stmt.bindLong(13, favorit ? 1l: 0l);
        }
 
        String typ = entity.getTyp();
        if (typ != null) {
            stmt.bindString(14, typ);
        }
        stmt.bindLong(15, entity.getInstitutId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Veranstaltung readEntity(Cursor cursor, int offset) {
        Veranstaltung entity = new Veranstaltung( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // titel
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // inhalt
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mapUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // zeit
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ort
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // kategorie
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // bisDreizehn
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // barrierefrei
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // wissenschaftsjahr
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // jugendliche
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // familie
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // favorit
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // typ
            cursor.getLong(offset + 14) // institutId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Veranstaltung entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitel(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInhalt(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMapUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setZeit(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOrt(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setKategorie(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBisDreizehn(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setBarrierefrei(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setWissenschaftsjahr(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setJugendliche(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setFamilie(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setFavorit(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setTyp(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setInstitutId(cursor.getLong(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Veranstaltung entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Veranstaltung entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "veranstaltungList" to-many relationship of Institut. */
    public List<Veranstaltung> _queryInstitut_VeranstaltungList(long institutId) {
        synchronized (this) {
            if (institut_VeranstaltungListQuery == null) {
                QueryBuilder<Veranstaltung> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.InstitutId.eq(null));
                institut_VeranstaltungListQuery = queryBuilder.build();
            }
        }
        Query<Veranstaltung> query = institut_VeranstaltungListQuery.forCurrentThread();
        query.setParameter(0, institutId);
        return query.list();
    }

}
